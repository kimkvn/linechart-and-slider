{"ast":null,"code":"import * as d3 from 'd3';\nimport cx from 'classnames';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport { convertPercentChange, buildXTicks } from './line-graph.transform';\nconst GraphLineColors = ['lineZero', 'lineOne', 'lineTwo', 'lineThree', 'lineFour', 'lineFive']; // Graph Dimensions\n\nconst totalWidth = 900;\nconst totalHeight = 400;\nconst margin = {\n  top: 30,\n  right: 20,\n  bottom: 30,\n  left: 40\n};\nconst graphWidth = totalWidth - margin.left - margin.right;\nconst graphHeight = totalHeight - margin.top - margin.bottom;\nconst yTicksCount = 6;\nlet prevPercentChange = 0;\n/* istanbul ignore next */\n\nconst drawModeledPerformanceGraph = (rawChartData, startDate, endDate, showChipValue, setPercentChangeData) => {\n  // when redrawing the graph with new data, this removes the old graph\n  d3.select('#isa-modeled-performance-chart > *').remove(); // set chart data\n\n  const chartData = rawChartData.map(comparator => {\n    return convertPercentChange(comparator);\n  });\n  console.log(chartData); ///////////////////////////////////////////////////\n  //////////////// Set the Scales ///////////////////\n  ///////////////////////////////////////////////////\n\n  const xScale = d3.scaleTime() // .domain(\n  //   d3.extent(chartData[0].values, d => {\n  //     return moment(d.date).valueOf();\n  //   })\n  // )\n  .domain([d3.min(chartData, d => {\n    return d3.min(d.values, v => {\n      return moment(v.date).valueOf();\n    });\n  }), d3.max(chartData, d => {\n    return d3.max(d.values, v => {\n      return moment(v.date).valueOf();\n    });\n  })]).range([0, graphWidth]);\n  const yScale = d3.scaleLinear().domain([// set min\n  d3.min(chartData, d => {\n    return d3.min(d.values, v => {\n      return v.percentChange;\n    });\n  }), // set max\n  d3.max(chartData, d => {\n    return d3.max(d.values, v => {\n      return v.percentChange;\n    });\n  })]).range([graphHeight, 0]); // Initiate the line function\n\n  const lineFunction = d3.line().x(d => {\n    return xScale(moment(d.date).valueOf());\n  }).y(d => {\n    return yScale(d.percentChange);\n  }).curve(d3.curveLinear); // Initiate the area line function\n\n  const areaFunction = d3.area().x(d => {\n    return xScale(moment(d.date).valueOf());\n  }).y0(graphHeight).y1(d => {\n    return yScale(d.percentChange);\n  }).curve(d3.curveLinear); ///////////////////////////////////////////////////\n  ////////////// Initialize the SVG /////////////////\n  ///////////////////////////////////////////////////\n  // Add the svg canvas for the line chart\n\n  const svg = d3.select('#isa-modeled-performance-chart').append('svg').attr('width', totalWidth).attr('height', totalHeight).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')'); // chart background\n\n  svg.append('rect').attr('width', graphWidth).attr('height', graphHeight).attr('fill', '#fff'); ///////////////////////////////////////////////////\n  ///////////// Create the gradient /////////////////\n  ///////////////////////////////////////////////////\n  // Define the gradient below the line chart\n\n  const areaGradient = svg.append('defs').append('linearGradient').attr('id', 'areaGradient').attr('x1', '0%').attr('y1', '0%').attr('x2', '0%').attr('y2', '100%'); // Append the first stop - the color at the top\n\n  areaGradient.append('stop').attr('offset', '0%').attr('stop-color', '#A3A3A4').attr('stop-opacity', 0.6); // Append the second stop - white transparant almost at the end\n\n  areaGradient.append('stop').attr('offset', '80%').attr('stop-color', 'white').attr('stop-opacity', 0); ///////////////////////////////////////////////////\n  /////////////// Create the chart //////////////////\n  ///////////////////////////////////////////////////\n  // xaxis tick values\n\n  const xAxisData = buildXTicks(moment.utc(startDate), moment.utc(endDate)); // Generate and render the X Axis\n\n  svg.append('g').attr('class', 'x-axis axis').attr('transform', 'translate(0,' + graphHeight + ')').call(d3.axisBottom(xScale).tickValues(xAxisData.xTicks).tickFormat(d3.utcFormat(xAxisData.xTickFormat))); // Generate and render the Y Axis\n\n  svg.append('g').attr('class', 'y-axis axis').call(d3.axisLeft(yScale).ticks(yTicksCount).tickFormat(d => d + '%')); // Graphline generators\n\n  const makeXGridlines = () => {\n    return d3.axisBottom(xScale).tickValues(xAxisData.xTicks);\n  };\n\n  const makeYGridlines = () => {\n    return d3.axisLeft(yScale).ticks(yTicksCount);\n  };\n\n  svg.append('g').attr('class', 'x-grid xGridLines').attr('transform', 'translate(0, ' + graphHeight + ')').call(makeXGridlines().tickSize(-graphHeight).tickFormat(''));\n  svg.append('g').attr('class', 'y-grid yGridLines').call(makeYGridlines().tickSize(-graphWidth).tickFormat('')); ///////////////////////////////////////////////////\n  ///////////  Render the comparators ///////////////\n  ///////////////////////////////////////////////////\n  // Render the gradient area\n\n  svg.append('g').attr('class', 'gradient-area-container').append('path').attr('class', 'area gradientArea').style('fill', 'url(#areaGradient)').attr('d', areaFunction(chartData[0].values)); // Render the comparator lines\n\n  const graphLines = svg.append('g').attr('class', 'graph-lines-container');\n  chartData.forEach((dataSet, index) => {\n    const styleClass = cx('graphLine', GraphLineColors[index]);\n    return graphLines.append('path').attr('class', styleClass).attr('d', lineFunction(dataSet.values));\n  }); ///////////////////////////////////////////////////\n  //////////////  Mouseover Effects  ////////////////\n  ///////////////////////////////////////////////////\n  // Vertical line\n\n  svg.append('g').attr('class', 'mouseLineContainer').append('line').attr('class', \"mouse-line\").style('stroke', '#a3a3a4').style('stroke-width', '1px').style('opacity', '0').style('stroke-dasharray', '5').attr('y1', 0).attr('y2', graphHeight); // Render invisible scatter plot per comparator (for mouseover effect)\n\n  const scatterPlot = svg.append('g').attr('class', 'scatter-plot-container');\n  chartData.forEach((dataSet, index) => {\n    return scatterPlot.append('g').attr('class', 'scatter-plot').selectAll('.dot').data(dataSet.values).enter().append('circle').attr('r', 4).attr('cx', d => xScale(moment(d.date).valueOf())).attr('cy', d => yScale(d.percentChange)).attr('class', d => {\n      const pointIndex = _.findIndex(dataSet.values, d);\n\n      return \"scatter-point point-\".concat(pointIndex, \" \").concat(GraphLineColors[index]);\n    }).attr('data-dateId', d => d.date).style('stroke-width', '1px').style('fill', '#fff').style('opacity', '0');\n  }); // Define Mouse in/out area\n\n  const mouseArea = svg.append('rect').attr('class', 'mouseAreaRect'); // Define mouse event handlers\n\n  const tooltip = d3.select(\"#chart-tooltip\");\n  const tooltipValue = d3.select(\"#chart-tooltip-value\");\n\n  const mouseOver = () => {\n    d3.select(\".mouse-line\").style('opacity', '1');\n    tooltip.style('visibility', 'visible');\n    showChipValue(true);\n  };\n\n  const mouseOut = () => {\n    d3.select(\".mouse-line\").style('opacity', '0');\n    d3.selectAll(\".scatter-point\").style('opacity', '0');\n    tooltip.style('visibility', 'hidden');\n    showChipValue(false);\n  };\n\n  const mouseMove = datapoint => {\n    const detectArea = d3.select('.mouseAreaRect').node();\n    const d3Mouse = d3.mouse(detectArea);\n    const bisect = d3.bisector(i => i.date).left;\n    const xDate = moment(xScale.invert(d3Mouse[0])).format('YYYY-MM-DD');\n    const index = bisect(datapoint.values, xDate);\n    const xDot = d3.select('.point-' + index).attr('cx');\n    const dataPoint = chartData[0].values.find(value => value.date === xDate);\n\n    if (dataPoint) {\n      // move vertical line\n      d3.select(\".mouse-line\").attr('transform', \"translate(\".concat(xDot, \", 0)\")); // Hide previous/all scatter points, but show new applicable ones\n\n      d3.selectAll(\".scatter-point\").style('opacity', '0');\n      d3.selectAll(\".scatter-point[data-dateId=\\\"\".concat(xDate, \"\\\"]\")).style('opacity', '1'); // Set tooltip date value, and position\n\n      const tooltipDate = moment(xDate).format('MMM DD, YYYY');\n      tooltipValue.html(tooltipDate);\n      const tooltipXPosition = d3Mouse[0] + 55;\n      const tooltipYPosition = d3Mouse[1] + 55;\n      tooltip.style('left', \"\".concat(tooltipXPosition, \"px\"));\n      tooltip.style('top', \"\".concat(tooltipYPosition, \"px\")); // send percentChange values to display\n\n      const percentChangeData = chartData.map(comparator => {\n        const findValue = comparator.values.find(value => value.date === xDate);\n        const percentChange = findValue ? findValue.percentChange : null;\n        return {\n          percentChange,\n          id: comparator.id\n        };\n      });\n\n      if (percentChangeData[0].percentChange !== prevPercentChange) {\n        prevPercentChange = percentChangeData[0].percentChange;\n        setPercentChangeData(percentChangeData);\n      }\n    }\n  }; // Generate mouse area with event handlers\n\n\n  mouseArea.data(chartData).attr('width', graphWidth).attr('height', graphHeight).attr('fill', 'none').attr('pointer-events', 'all').on('mouseover', () => mouseOver()).on('mousemove', d => mouseMove(d)).on('mouseout', () => mouseOut());\n};\n\nexport default drawModeledPerformanceGraph;","map":{"version":3,"sources":["/Users/suavestefano/repos/linechart-and-slider/app/src/line-graph.generator.js"],"names":["d3","cx","moment","_","convertPercentChange","buildXTicks","GraphLineColors","totalWidth","totalHeight","margin","top","right","bottom","left","graphWidth","graphHeight","yTicksCount","prevPercentChange","drawModeledPerformanceGraph","rawChartData","startDate","endDate","showChipValue","setPercentChangeData","select","remove","chartData","map","comparator","console","log","xScale","scaleTime","domain","min","d","values","v","date","valueOf","max","range","yScale","scaleLinear","percentChange","lineFunction","line","x","y","curve","curveLinear","areaFunction","area","y0","y1","svg","append","attr","areaGradient","xAxisData","utc","call","axisBottom","tickValues","xTicks","tickFormat","utcFormat","xTickFormat","axisLeft","ticks","makeXGridlines","makeYGridlines","tickSize","style","graphLines","forEach","dataSet","index","styleClass","scatterPlot","selectAll","data","enter","pointIndex","findIndex","mouseArea","tooltip","tooltipValue","mouseOver","mouseOut","mouseMove","datapoint","detectArea","node","d3Mouse","mouse","bisect","bisector","i","xDate","invert","format","xDot","dataPoint","find","value","tooltipDate","html","tooltipXPosition","tooltipYPosition","percentChangeData","findValue","id","on"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\nimport cx from 'classnames';\nimport moment from 'moment';\nimport _ from 'lodash';\n\nimport { convertPercentChange, buildXTicks } from './line-graph.transform';\n\nconst GraphLineColors = [\n  'lineZero',\n  'lineOne',\n  'lineTwo',\n  'lineThree',\n  'lineFour',\n  'lineFive'\n];\n\n// Graph Dimensions\nconst totalWidth = 900;\nconst totalHeight = 400;\nconst margin = { top: 30, right: 20, bottom: 30, left: 40 };\nconst graphWidth = totalWidth - margin.left - margin.right;\nconst graphHeight = totalHeight - margin.top - margin.bottom;\n\nconst yTicksCount = 6;\n\nlet prevPercentChange = 0;\n\n/* istanbul ignore next */\nconst drawModeledPerformanceGraph = (\n  rawChartData,\n  startDate,\n  endDate,\n  showChipValue,\n  setPercentChangeData\n) => {\n  // when redrawing the graph with new data, this removes the old graph\n  d3.select('#isa-modeled-performance-chart > *').remove();\n\n  // set chart data\n  const chartData = rawChartData.map(comparator => {\n    return convertPercentChange(comparator);\n  });\n  console.log(chartData)\n  ///////////////////////////////////////////////////\n  //////////////// Set the Scales ///////////////////\n  ///////////////////////////////////////////////////\n\n  const xScale = d3\n    .scaleTime()\n    // .domain(\n    //   d3.extent(chartData[0].values, d => {\n    //     return moment(d.date).valueOf();\n    //   })\n    // )\n    .domain([\n      d3.min(chartData, d => {\n        return d3.min(d.values, v => {\n          return moment(v.date).valueOf();\n        })\n      }),\n      d3.max(chartData, d => {\n        return d3.max(d.values, v => {\n          return moment(v.date).valueOf();\n        });\n      })\n    ])\n    .range([0, graphWidth]);\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([\n      // set min\n      d3.min(chartData, d => {\n        return d3.min(d.values, v => {\n          return v.percentChange;\n        });\n      }),\n      // set max\n      d3.max(chartData, d => {\n        return d3.max(d.values, v => {\n          return v.percentChange;\n        });\n      })\n    ])\n    .range([graphHeight, 0]);\n\n  // Initiate the line function\n  const lineFunction = d3\n    .line()\n    .x(d => {\n      return xScale(moment(d.date).valueOf());\n    })\n    .y(d => {\n      return yScale(d.percentChange);\n    })\n    .curve(d3.curveLinear);\n  // Initiate the area line function\n  const areaFunction = d3\n    .area()\n    .x(d => {\n      return xScale(moment(d.date).valueOf());\n    })\n    .y0(graphHeight)\n    .y1(d => {\n      return yScale(d.percentChange);\n    })\n    .curve(d3.curveLinear);\n  ///////////////////////////////////////////////////\n  ////////////// Initialize the SVG /////////////////\n  ///////////////////////////////////////////////////\n\n  // Add the svg canvas for the line chart\n  const svg = d3\n    .select('#isa-modeled-performance-chart')\n    .append('svg')\n    .attr('width', totalWidth)\n    .attr('height', totalHeight)\n    .append('g')\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n  // chart background\n  svg\n    .append('rect')\n    .attr('width', graphWidth)\n    .attr('height', graphHeight)\n    .attr('fill', '#fff');\n\n  ///////////////////////////////////////////////////\n  ///////////// Create the gradient /////////////////\n  ///////////////////////////////////////////////////\n\n  // Define the gradient below the line chart\n  const areaGradient = svg\n    .append('defs')\n    .append('linearGradient')\n    .attr('id', 'areaGradient')\n    .attr('x1', '0%')\n    .attr('y1', '0%')\n    .attr('x2', '0%')\n    .attr('y2', '100%');\n\n  // Append the first stop - the color at the top\n  areaGradient\n    .append('stop')\n    .attr('offset', '0%')\n    .attr('stop-color', '#A3A3A4')\n    .attr('stop-opacity', 0.6);\n  // Append the second stop - white transparant almost at the end\n  areaGradient\n    .append('stop')\n    .attr('offset', '80%')\n    .attr('stop-color', 'white')\n    .attr('stop-opacity', 0);\n\n  ///////////////////////////////////////////////////\n  /////////////// Create the chart //////////////////\n  ///////////////////////////////////////////////////\n\n  // xaxis tick values\n  const xAxisData = buildXTicks(moment.utc(startDate), moment.utc(endDate));\n  // Generate and render the X Axis\n  svg\n    .append('g')\n    .attr('class', 'x-axis axis')\n    .attr('transform', 'translate(0,' + graphHeight + ')')\n    .call(\n      d3\n        .axisBottom(xScale)\n        .tickValues(xAxisData.xTicks)\n        .tickFormat(d3.utcFormat(xAxisData.xTickFormat))\n    );\n  // Generate and render the Y Axis\n  svg\n    .append('g')\n    .attr('class', 'y-axis axis')\n    .call(\n      d3\n        .axisLeft(yScale)\n        .ticks(yTicksCount)\n        .tickFormat(d => d + '%')\n    );\n\n  // Graphline generators\n  const makeXGridlines = () => {\n    return d3.axisBottom(xScale).tickValues(xAxisData.xTicks);\n  };\n  const makeYGridlines = () => {\n    return d3.axisLeft(yScale).ticks(yTicksCount);\n  };\n  svg\n    .append('g')\n    .attr('class', 'x-grid xGridLines')\n    .attr('transform', 'translate(0, ' + graphHeight + ')')\n    .call(\n      makeXGridlines()\n        .tickSize(-graphHeight)\n        .tickFormat('')\n    );\n  svg\n    .append('g')\n    .attr('class', 'y-grid yGridLines')\n    .call(\n      makeYGridlines()\n        .tickSize(-graphWidth)\n        .tickFormat('')\n    );\n\n  ///////////////////////////////////////////////////\n  ///////////  Render the comparators ///////////////\n  ///////////////////////////////////////////////////\n\n  // Render the gradient area\n  svg\n    .append('g')\n    .attr('class', 'gradient-area-container')\n    .append('path')\n    .attr('class', 'area gradientArea')\n    .style('fill', 'url(#areaGradient)')\n    .attr('d', areaFunction(chartData[0].values));\n\n  // Render the comparator lines\n  const graphLines = svg.append('g').attr('class', 'graph-lines-container');\n  chartData.forEach((dataSet, index) => {\n    const styleClass = cx('graphLine', GraphLineColors[index]);\n    return graphLines\n      .append('path')\n      .attr('class', styleClass)\n      .attr('d', lineFunction(dataSet.values));\n  });\n\n  ///////////////////////////////////////////////////\n  //////////////  Mouseover Effects  ////////////////\n  ///////////////////////////////////////////////////\n\n  // Vertical line\n  svg\n    .append('g')\n    .attr('class', 'mouseLineContainer')\n    .append('line')\n    .attr('class', `mouse-line`)\n    .style('stroke', '#a3a3a4')\n    .style('stroke-width', '1px')\n    .style('opacity', '0')\n    .style('stroke-dasharray', '5')\n    .attr('y1', 0)\n    .attr('y2', graphHeight);\n\n  // Render invisible scatter plot per comparator (for mouseover effect)\n  const scatterPlot = svg.append('g').attr('class', 'scatter-plot-container');\n  chartData.forEach((dataSet, index) => {\n    return scatterPlot\n      .append('g')\n      .attr('class', 'scatter-plot')\n      .selectAll('.dot')\n      .data(dataSet.values)\n      .enter()\n      .append('circle')\n      .attr('r', 4)\n      .attr('cx', d => xScale(moment(d.date).valueOf()))\n      .attr('cy', d => yScale(d.percentChange))\n      .attr('class', d => {\n        const pointIndex = _.findIndex(dataSet.values, d);\n        return `scatter-point point-${pointIndex} ${GraphLineColors[index]}`;\n      })\n      .attr('data-dateId', d => d.date)\n      .style('stroke-width', '1px')\n      .style('fill', '#fff')\n      .style('opacity', '0');\n  });\n\n  // Define Mouse in/out area\n  const mouseArea = svg.append('rect').attr('class', 'mouseAreaRect');\n\n  // Define mouse event handlers\n  const tooltip = d3.select(`#chart-tooltip`);\n  const tooltipValue = d3.select(`#chart-tooltip-value`);\n\n  const mouseOver = () => {\n    d3.select(`.mouse-line`).style('opacity', '1');\n    tooltip.style('visibility', 'visible');\n    showChipValue(true);\n  };\n  const mouseOut = () => {\n    d3.select(`.mouse-line`).style('opacity', '0');\n    d3.selectAll(`.scatter-point`).style('opacity', '0');\n    tooltip.style('visibility', 'hidden');\n    showChipValue(false);\n  };\n  const mouseMove = datapoint => {\n    const detectArea = d3.select('.mouseAreaRect').node();\n    const d3Mouse = d3.mouse(detectArea);\n    const bisect = d3.bisector(i => i.date).left;\n    const xDate = moment(xScale.invert(d3Mouse[0])).format('YYYY-MM-DD');\n    const index = bisect(datapoint.values, xDate);\n    const xDot = d3.select('.point-' + index).attr('cx');\n\n    const dataPoint = chartData[0].values.find(value => value.date === xDate);\n    if (dataPoint) {\n      // move vertical line\n      d3.select(`.mouse-line`).attr('transform', `translate(${xDot}, 0)`);\n\n      // Hide previous/all scatter points, but show new applicable ones\n      d3.selectAll(`.scatter-point`).style('opacity', '0');\n      d3.selectAll(`.scatter-point[data-dateId=\"${xDate}\"]`).style(\n        'opacity',\n        '1'\n      );\n\n      // Set tooltip date value, and position\n      const tooltipDate = moment(xDate).format('MMM DD, YYYY');\n      tooltipValue.html(tooltipDate);\n      const tooltipXPosition = d3Mouse[0] + 55;\n      const tooltipYPosition = d3Mouse[1] + 55;\n      tooltip.style('left', `${tooltipXPosition}px`);\n      tooltip.style('top', `${tooltipYPosition}px`);\n\n      // send percentChange values to display\n      const percentChangeData = chartData.map(comparator => {\n        const findValue = comparator.values.find(value => value.date === xDate);\n        const percentChange = findValue ? findValue.percentChange : null;\n        return {\n          percentChange,\n          id: comparator.id\n        };\n      });\n      if (percentChangeData[0].percentChange !== prevPercentChange) {\n        prevPercentChange = percentChangeData[0].percentChange;\n        setPercentChangeData(percentChangeData);\n      }\n    }\n  };\n\n  // Generate mouse area with event handlers\n  mouseArea\n    .data(chartData)\n    .attr('width', graphWidth)\n    .attr('height', graphHeight)\n    .attr('fill', 'none')\n    .attr('pointer-events', 'all')\n    .on('mouseover', () => mouseOver())\n    .on('mousemove', d => mouseMove(d))\n    .on('mouseout', () => mouseOut());\n};\n\nexport default drawModeledPerformanceGraph;\n"]},"metadata":{},"sourceType":"module"}