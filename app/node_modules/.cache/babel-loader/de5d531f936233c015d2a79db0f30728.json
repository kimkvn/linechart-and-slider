{"ast":null,"code":"import moment from 'moment';\nexport const calcPercentChange = (base, price) => {\n  const percentChange = (price / base - 1) * 100;\n  return percentChange;\n};\nexport const convertPercentChange = comparator => {\n  const priceData = comparator.values;\n  const base = priceData.find(dataPoint => dataPoint.price);\n  const percentChangeData = priceData.map(value => {\n    return {\n      date: value.date,\n      price: value.price,\n      percentChange: calcPercentChange(base.price, value.price)\n    };\n  });\n  return {\n    id: comparator.id,\n    key: comparator.key,\n    values: percentChangeData\n  };\n}; // X Axis tick\n\nexport const generateTicks = (from, to, interval, period) => {\n  let dateCount = from;\n  const ticks = [moment.utc(dateCount)];\n\n  while (dateCount.isSameOrBefore(to)) {\n    ticks.push(moment.utc(dateCount));\n    dateCount = dateCount.add(interval, period);\n  }\n\n  ticks.shift();\n  return ticks;\n};\nexport const buildXTicks = (from, to) => {\n  const dateMonthRange = to.diff(from, 'month');\n  const xAxisBuild = {\n    xTicks: [{}],\n    xTickFormat: ''\n  };\n\n  if (dateMonthRange <= 1) {\n    xAxisBuild.xTicks = generateTicks(from, to, 7, 'day');\n    xAxisBuild.xTickFormat = '%e';\n    return xAxisBuild;\n  }\n\n  if (dateMonthRange < 6) {\n    xAxisBuild.xTicks = generateTicks(from, to, 1, 'month');\n    xAxisBuild.xTickFormat = '%b';\n    return xAxisBuild;\n  }\n\n  if (dateMonthRange >= 6 && dateMonthRange < 24) {\n    xAxisBuild.xTicks = generateTicks(from, to, 2, 'month');\n\n    if (dateMonthRange >= 12) {\n      xAxisBuild.xTickFormat = \"%b '%y\";\n    } else {\n      xAxisBuild.xTickFormat = '%b';\n    }\n\n    return xAxisBuild;\n  }\n\n  if (dateMonthRange >= 24 && dateMonthRange < 60) {\n    xAxisBuild.xTicks = generateTicks(from, to, 6, 'month');\n    xAxisBuild.xTickFormat = \"%b '%y\";\n    return xAxisBuild;\n  }\n\n  xAxisBuild.xTicks = generateTicks(from, to, 1, 'year');\n  xAxisBuild.xTickFormat = '%Y';\n  return xAxisBuild;\n};","map":{"version":3,"sources":["/Users/suavestefano/repos/linechart-and-slider/app/src/line-graph.transform.js"],"names":["moment","calcPercentChange","base","price","percentChange","convertPercentChange","comparator","priceData","values","find","dataPoint","percentChangeData","map","value","date","id","key","generateTicks","from","to","interval","period","dateCount","ticks","utc","isSameOrBefore","push","add","shift","buildXTicks","dateMonthRange","diff","xAxisBuild","xTicks","xTickFormat"],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nexport const calcPercentChange = (base, price) => {\n  const percentChange = (price / base - 1) * 100;\n  return percentChange;\n};\n\nexport const convertPercentChange = comparator => {\n  const priceData = comparator.values;\n  const base = priceData.find(dataPoint => dataPoint.price);\n  const percentChangeData = priceData.map(value => {\n    return {\n      date: value.date,\n      price: value.price,\n      percentChange: calcPercentChange(base.price, value.price)\n    };\n  });\n  return {\n    id: comparator.id,\n    key: comparator.key,\n    values: percentChangeData\n  };\n};\n\n// X Axis tick\nexport const generateTicks = (from, to, interval, period) => {\n  let dateCount = from;\n  const ticks = [moment.utc(dateCount)];\n  while (dateCount.isSameOrBefore(to)) {\n    ticks.push(moment.utc(dateCount));\n    dateCount = dateCount.add(interval, period);\n  }\n  ticks.shift();\n  return ticks;\n};\n\nexport const buildXTicks = (from, to) => {\n  const dateMonthRange = to.diff(from, 'month');\n  const xAxisBuild = {\n    xTicks: [{}],\n    xTickFormat: ''\n  };\n  if (dateMonthRange <= 1) {\n    xAxisBuild.xTicks = generateTicks(from, to, 7, 'day');\n    xAxisBuild.xTickFormat = '%e';\n    return xAxisBuild;\n  }\n  if (dateMonthRange < 6) {\n    xAxisBuild.xTicks = generateTicks(from, to, 1, 'month');\n    xAxisBuild.xTickFormat = '%b';\n    return xAxisBuild;\n  }\n  if (dateMonthRange >= 6 && dateMonthRange < 24) {\n    xAxisBuild.xTicks = generateTicks(from, to, 2, 'month');\n    if (dateMonthRange >= 12) {\n      xAxisBuild.xTickFormat = \"%b '%y\";\n    } else {\n      xAxisBuild.xTickFormat = '%b';\n    }\n    return xAxisBuild;\n  }\n  if (dateMonthRange >= 24 && dateMonthRange < 60) {\n    xAxisBuild.xTicks = generateTicks(from, to, 6, 'month');\n    xAxisBuild.xTickFormat = \"%b '%y\";\n    return xAxisBuild;\n  }\n  xAxisBuild.xTicks = generateTicks(from, to, 1, 'year');\n  xAxisBuild.xTickFormat = '%Y';\n  return xAxisBuild;\n};\n"]},"metadata":{},"sourceType":"module"}